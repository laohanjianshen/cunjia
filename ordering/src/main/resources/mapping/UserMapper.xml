<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cunjia.ordering.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.cunjia.ordering.domain.User">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="user_nickname" jdbcType="VARCHAR" property="userNickname"/>
        <result column="user_password" jdbcType="VARCHAR" property="userPassword"/>
        <result column="user_phone" jdbcType="VARCHAR" property="userPhone"/>
        <result column="user_avatar_url" jdbcType="VARCHAR" property="userAvatarUrl"/>
        <result column="user_sex" jdbcType="INTEGER" property="userSex"/>
        <result column="user_age" jdbcType="INTEGER" property="userAge"/>
        <result column="user_create_time" jdbcType="TIMESTAMP" property="userCreateTime"/>
        <result column="user_status" jdbcType="INTEGER" property="userStatus"/>
        <result column="user_last_login_time" jdbcType="TIMESTAMP" property="userLastLoginTime"/>
        <result column="user_token" jdbcType="VARCHAR" property="userToken"/>
        <result column="user_wx_openid" jdbcType="VARCHAR" property="userWxOpenid"/>
        <result column="shop_id" jdbcType="INTEGER" property="shopId"/>
    </resultMap>
    <sql id="Base_Column_List">
    user_id, user_name, user_nickname, user_password, user_phone, user_avatar_url, user_sex, 
    user_age, user_create_time, user_status, user_last_login_time, user_token, user_wx_openid, shop_id
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from u_user
        where user_id = #{userId,jdbcType=INTEGER}
    </select>

    <select id="getAllUserList"  resultType="com.cunjia.ordering.domain.User">
        select
        <include refid="Base_Column_List"/>
        from u_user
    </select>
    <!--获取用户信息接口-->
    <select id="getUserInfo" parameterType="java.lang.Integer" resultType="com.cunjia.ordering.domain.User">
        select
        user_nickname, user_phone, user_avatar_url, user_sex, user_age
        from u_user
        where user_id = #{userId,jdbcType=INTEGER}
    </select>

    <!--获取用户店铺、默认地址等信息接口-->
    <select id="getUserExtraInfo" parameterType="java.lang.Integer" resultType="com.cunjia.ordering.vo.UserInfoVO">
        select a.user_name, a.user_sex, b.address_id, b.address_name, b.address_phone, b.city_name, b.district_name, b.location_building, b.address_detail,
         c.shop_name, c.shop_city, c.shop_discount_deadline, c.shop_buy_deadline, c.shop_self_surface_price
        from u_user a
        left join address_whole b on b.user_id = a.user_id AND b.address_default = 1
        left join shops c on c.shop_id = a.shop_id
        where a.user_id = #{userId,jdbcType=INTEGER}
    </select>

    <!--根据openid查询用户是否存在-->
    <select id="getUserByOpenid" parameterType="com.cunjia.ordering.domain.User"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from u_user
        where user_wx_openid = #{userWxOpenid,jdbcType=VARCHAR}
    </select>

    <!--根据map查询用户-->
    <select id="selectUserByMap" parameterType="java.util.Map"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from u_user
        where user_id = #{userId,jdbcType=VARCHAR}
    </select>

    <resultMap id="UserRoleResultMap" type="com.cunjia.ordering.vo.UserInfoVO">
    </resultMap>
    <!--获取用户角色及权限信息-->
    <select id="getUserRoleAndPermission" parameterType="java.lang.Integer"
            resultMap="UserRoleResultMap">
            select d.user_name, d.role_name, e.permission_url, e.permission_name from (select a.user_name, b.id, b.role_name from u_user a, u_role b,u_user_role c where a.user_id =#{userId,jdbcType=VARCHAR}
    AND c.uid = #{userId,jdbcType=VARCHAR} AND b.id = c.rid) d, u_permission e, u_role_permission f where f.rid = d.id AND e.id = f.pid
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from u_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
    <!--查询出所有用户的id-->
    <!--    <select id="getAllUserList" resultType="com.cunjia.ordering.domain.User">
            select user_id from u_user
        </select>-->
    <!--修改用户角色-->

    <insert id="insert" parameterType="com.cunjia.ordering.domain.User" useGeneratedKeys="true">
        <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into u_user (user_name, user_nickname, user_password,
        user_phone, user_avatar_url, user_sex,
        user_age, user_create_time, user_status,
        user_last_login_time, user_token, user_wx_openid
        )
        values (#{userName,jdbcType=VARCHAR}, #{userNickname,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR},
        #{userPhone,jdbcType=VARCHAR}, #{userAvatarUrl,jdbcType=VARCHAR}, #{userSex,jdbcType=INTEGER},
        #{userAge,jdbcType=INTEGER}, #{userCreateTime,jdbcType=TIMESTAMP}, #{userStatus,jdbcType=INTEGER},
        #{userLastLoginTime,jdbcType=TIMESTAMP}, #{userToken,jdbcType=VARCHAR}, #{userWxOpenid,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.cunjia.ordering.domain.User" useGeneratedKeys="true">
        <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer" keyColumn="user_id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into u_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                user_name,
            </if>
            <if test="userNickname != null">
                user_nickname,
            </if>
            <if test="userPassword != null">
                user_password,
            </if>
            <if test="userPhone != null">
                user_phone,
            </if>
            <if test="userAvatarUrl != null">
                user_avatar_url,
            </if>
            <if test="userSex != null">
                user_sex,
            </if>
            <if test="userAge != null">
                user_age,
            </if>
            <if test="userCreateTime != null">
                user_create_time,
            </if>
            <if test="userStatus != null">
                user_status,
            </if>
            <if test="userLastLoginTime != null">
                user_last_login_time,
            </if>
            <if test="userToken != null">
                user_token,
            </if>
            <if test="userWxOpenid != null">
                user_wx_openid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userNickname != null">
                #{userNickname,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="userPhone != null">
                #{userPhone,jdbcType=VARCHAR},
            </if>
            <if test="userAvatarUrl != null">
                #{userAvatarUrl,jdbcType=VARCHAR},
            </if>
            <if test="userSex != null">
                #{userSex,jdbcType=INTEGER},
            </if>
            <if test="userAge != null">
                #{userAge,jdbcType=INTEGER},
            </if>
            <if test="userCreateTime != null">
                #{userCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="userStatus != null">
                #{userStatus,jdbcType=INTEGER},
            </if>
            <if test="userLastLoginTime != null">
                #{userLastLoginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="userToken != null">
                #{userToken,jdbcType=VARCHAR},
            </if>
            <if test="userWxOpenid != null">
                #{userWxOpenid,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.cunjia.ordering.domain.User">
        update u_user
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userNickname != null">
                user_nickname = #{userNickname,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                user_password = #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="userPhone != null">
                user_phone = #{userPhone,jdbcType=VARCHAR},
            </if>
            <if test="userAvatarUrl != null">
                user_avatar_url = #{userAvatarUrl,jdbcType=VARCHAR},
            </if>
            <if test="userSex != null">
                user_sex = #{userSex,jdbcType=INTEGER},
            </if>
            <if test="userAge != null">
                user_age = #{userAge,jdbcType=INTEGER},
            </if>
            <if test="userCreateTime != null">
                user_create_time = #{userCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="userStatus != null">
                user_status = #{userStatus,jdbcType=INTEGER},
            </if>
            <if test="userLastLoginTime != null">
                user_last_login_time = #{userLastLoginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="userToken != null">
                user_token = #{userToken,jdbcType=VARCHAR},
            </if>
            <if test="userWxOpenid != null">
                user_wx_openid = #{userWxOpenid,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.cunjia.ordering.domain.User">
    update u_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_nickname = #{userNickname,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_phone = #{userPhone,jdbcType=VARCHAR},
      user_avatar_url = #{userAvatarUrl,jdbcType=VARCHAR},
      user_sex = #{userSex,jdbcType=INTEGER},
      user_age = #{userAge,jdbcType=INTEGER},
      user_create_time = #{userCreateTime,jdbcType=TIMESTAMP},
      user_status = #{userStatus,jdbcType=INTEGER},
      user_last_login_time = #{userLastLoginTime,jdbcType=TIMESTAMP},
      user_token = #{userToken,jdbcType=VARCHAR},
      user_wx_openid = #{userWxOpenid,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

    <update id="updateUserRoleInfo">
    update u_user_role
    <set>
        <if test="roleId != null">
            rid = #{roleId,jdbcType=BIGINT},
        </if>
    </set>
    where uid = #{userId,jdbcType=INTEGER}
</update>
<!--绑定用户手机号-->
    <update id="updateUserRoleInfo">
        update u_user_role
        <set>
            <if test="roleId != null">
                rid = #{roleId,jdbcType=BIGINT},
            </if>
        </set>
        where uid = #{userId,jdbcType=INTEGER}
    </update>


</mapper>